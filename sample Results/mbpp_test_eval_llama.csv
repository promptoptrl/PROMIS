prompt_id,passed_testcases,pass_at_1,pass_at_1_mean,generated_code
11,"[1, 0, 0]",0,1/3,"def remove_Occ(string, char):\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n    return string[:first_index] + string[last_index+1:]"
12,"[1, 1, 1]",1,3/3,"def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"
13,"[0, 0, 0]",0,0/3,"def count_common(my_list):\n    counter = {}\n    for word in my_list:\n        if word in counter:\n            counter[word] += 1\n        else:\n            counter[word] = 1\n    return [(word, count) for word, count in counter.items() if count == max(counter.values())]"
14,"[0, 0, 0]",0,0/3,"def find_Volume(base, height, length):\n    return base * height * length"
15,"[0, 0, 0]",0,0/3,"def split_lowerstring(s):\n    return [s[i+1:j] for i in range(len(s)) for j in range(i+1, len(s)) if s[i].islower() and s[j].isupper()]"
16,"[1, 1, 0]",0,2/3,"def text_lowercase_underscore(text):\n    pattern = r""[a-z]+_[a-z]+""\n    if re.search(pattern, text):\n        return ""Found a match!""\n    else:\n        return ""Not matched!"""
17,"[1, 1, 1]",1,3/3,def square_perimeter(side_length):\n    return 4 * side_length
18,"[1, 1, 1]",1,3/3,"def remove_dirty_chars(string1, string2):\n    for char in string2:\n        string1 = string1.replace(char, """")\n    return string1"
19,"[1, 1, 1]",1,3/3,def test_duplicate(arr):\n    return len(arr) != len(set(arr))
20,"[1, 1, 1]",1,3/3,def is_woodall(n):\n    return str(n) == str(n)[::-1]
21,"[0, 0, 0]",0,0/3,"def multiples_of_num(num, m):\n    return [num*i for i in range(1, m+1)]"
22,"[1, 1, 1]",1,3/3,def find_first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            return arr[i]\n    return -1
23,"[0, 0, 0]",0,0/3,def maximum_sum(my_list):\n    return max(sum(sublist) for sublist in my_list)
24,"[0, 0, 0]",0,0/3,"def binary_to_decimal(binary_string):\n    return int(binary_string, 2)"
25,"[0, 1, 0]",0,1/3,"def find_Product(arr, n):\n    prod = 1\n    for i in range(n):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            prod *= arr[i]\n    return prod"
26,"[0, 0, 1]",0,1/3,"def check_k_elements(tuple_list, k):\n    return all(len(t) == k for t in tuple_list)"
27,"[1, 0, 0]",0,1/3,"def remove(my_list):\n    return [word.replace(word[0], """") for word in my_list]"
28,"[1, 1, 1]",1,3/3,"def binomial_Coeff(n, k):\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res *= n - i\n        res //= i + 1\n    return res"
29,"[0, 0, 0]",0,0/3,"def get_Odd_Occurrence(my_list, expected_count):\n    counts = {}\n    for item in my_list:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n\n    for item, count in counts.items():\n        if count == expected_count:\n            return item\n\n    return None"
30,"[0, 0, 0]",0,0/3,"def count_Substring_With_Equal_Ends(input_string):\n    count = 0\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)):\n            if input_string[i] == input_string[j]:\n                count += 1\n    return count"
31,"[0, 0, 0]",0,0/3,"[PYTHON]\ndef func(lists, k):\n    # Initialize a priority queue to store the top k elements\n    pq = []\n\n    # Loop through the lists\n    for lst in lists:\n        # Loop through the elements in the current list\n        for elem in lst:\n            # If the element is already in the priority queue, increase its count\n            if elem in pq:\n                pq[elem] += 1\n            # Otherwise, add it to the priority queue with a count of 1\n            else:\n                pq[elem] = 1\n\n    # Loop k times to get the top k elements\n    for _ in range(k):\n        # Get the element with the highest count from the priority queue\n        elem, count = max(pq.items(), key=lambda x: x[1])\n        #"
32,"[0, 0, 0]",0,0/3,def max_prime_factor(n):\n    if n <= 1:\n        return n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n
33,"[0, 0, 0]",0,0/3,def decimal_To_Binary(n):\n    return bin(n)[2:]
34,"[1, 1, 1]",1,3/3,"def find_missing(arr, n):\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1"
35,"[1, 1, 1]",1,3/3,def find_rect_num(n):\n    return n * (n + 1)
36,"[0, 0, 0]",0,0/3,"def find_Nth_Digit(num1, num2, n):\n    result = 0\n    while num1 > 0 or num2 > 0:\n        if num1 > num2:\n            num1, num2 = num1 - num2, num2\n        else:\n            num1, num2 = num1, num2 - num1\n        result += 1\n        if result == n:\n            return num1\n    return -1"
37,"[0, 0, 0]",0,0/3,"def sort_mixed_list(my_list):\n    return sorted(my_list, key=lambda x: (x if isinstance(x, int) else float('inf')))"
38,"[1, 1, 1]",1,3/3,def div_even_odd(my_list):\n    even_nums = [num for num in my_list if num % 2 == 0]\n    odd_nums = [num for num in my_list if num % 2 != 0]\n    if len(even_nums) == 0 or len(odd_nums) == 0:\n        return None\n    return even_nums[0] // odd_nums[0]
39,"[0, 0, 0]",0,0/3,"def rearrange_string(input_string):\n    char_count = {}\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    sorted_chars = sorted(char_count.items(), key=lambda x: x[1], reverse=True)\n\n    result = """"\n    for char, count in sorted_chars:\n        result += char * count\n\n    return result"
40,"[1, 1, 1]",1,3/3,import collections\n\ndef freq_element(lst):\n    count = collections.Counter()\n    for sublist in lst:\n        for element in sublist:\n            count[element] += 1\n    return count
41,"[1, 1, 1]",1,3/3,"def filter_evennumbers(mylist):\n    return list(filter(lambda x: x%2==0, mylist))"
42,"[1, 1, 1]",1,3/3,"def find_Sum(arr, n):\n    return sum([x for x in arr if arr.count(x) > 1])"
43,"[1, 1, 0]",0,2/3,"import re\n\ndef text_match(text):\n    pattern = r""[a-z]+_[a-z]+""\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
44,"[1, 1, 1]",1,3/3,"def text_match_string(my_string):\n    if my_string.startswith(""python""):\n        return ""Found a match!""\n    else:\n        return ""Not matched!"""
45,"[1, 1, 1]",1,3/3,"def get_gcd(arr):\n    if len(arr) == 2:\n        return gcd(arr[0], arr[1])\n    else:\n        return gcd(arr[0], get_gcd(arr[1:]))\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)"
46,"[1, 1, 1]",1,3/3,def test_distinct(my_list):\n    return len(my_list) == len(set(my_list))
47,"[0, 0, 0]",0,0/3,"def compute_Last_Digit(a, b):\n    factorial_a = a\n    factorial_b = b\n    while factorial_a > 0:\n        if factorial_a % 10 == factorial_b % 10:\n            return factorial_a % 10\n        factorial_a //= 10\n        factorial_b //= 10\n    return -1"
48,"[0, 0, 0]",0,0/3,def odd_bit_set_number(n):\n    return n | 0xAAAAAAAA
49,"[1, 1, 1]",1,3/3,"def specified_element(my_list, element_index):\n    return [sublist[element_index] for sublist in my_list]"
50,"[0, 0, 0]",0,0/3,"def min_length_list(my_list):\n    return min(my_list, key=lambda x: len(x))"
51,"[1, 1, 1]",1,3/3,"def check_equilateral(side1, side2, side3):\n    return side1 == side2 == side3"
52,"[1, 1, 1]",1,3/3,"def parallelogram_area(base, height):\n    return base * height"
53,"[1, 1, 1]",1,3/3,"def check_Equality(input_string):\n    if input_string[0] == input_string[-1]:\n        return ""Equal""\n    else:\n        return ""Not Equal"""
54,"[1, 1, 1]",1,3/3,def counting_sort(arr):\n    # Find the maximum element in the array\n    max_elem = max(arr)\n\n    # Create a count array to store the number of elements in the output array\n    count = [0] * (max_elem + 1)\n\n    # Fill the count array with the number of elements for each index\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    # Fill the output array with the elements\n    i = 0\n    for j in range(len(count)):\n        while count[j] > 0:\n            arr[i] = j\n            i += 1\n            count[j] -= 1\n\n    return arr
55,"[0, 0, 0]",0,0/3,"def tn_gp(a, r, n):\n    return a * (r ** (n - 1))"
56,"[1, 1, 0]",0,2/3,"def check(num):\n    return str(num) == str(num)[::-1] + ""1"""
57,"[0, 0, 0]",0,0/3,"def find_max_num(digits, n):\n    digits.sort(reverse=True)\n    num = """"\n    for i in range(n):\n        num += digits[i]\n    return int(num)"
58,"[1, 1, 1]",1,3/3,"def opposite_Signs(a, b):\n    return a*b < 0"
59,"[0, 0, 0]",0,0/3,def is_octagonal(n):\n    return (n * (3 * n - 1)) // 2
60,"[0, 0, 0]",0,0/3,"def max_len_sub(arr, diff):\n    max_len = 0\n    current_len = 0\n    prev = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] - prev <= diff:\n            current_len += 1\n        else:\n            current_len = 1\n        prev = arr[i]\n        max_len = max(max_len, current_len)\n    return max_len"
61,"[1, 0, 0]",0,1/3,"def count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(c) for c in s[i:j+1]) == j+1:\n                count += 1\n    return count"
62,"[1, 1, 1]",1,3/3,def smallest_num(my_list):\n    return min(my_list)
63,"[1, 1, 1]",1,3/3,def max_difference(tuple_list):\n    return max([abs(t[0] - t[1]) for t in tuple_list])
64,"[0, 0, 0]",0,0/3,"def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1], reverse=True)"
65,"[0, 0, 0]",0,0/3,"def recursive_list_sum(my_list):\n    if len(my_list) == 0:\n        return 0\n    elif isinstance(my_list[0], list):\n        return my_list[0] + recursive_list_sum(my_list[1:])\n    else:\n        return my_list[0] + recursive_list_sum(my_list[1:])"
66,"[1, 1, 1]",1,3/3,def pos_count(my_list):\n    return len([x for x in my_list if x > 0])
67,"[0, 0, 0]",0,0/3,def bell_number(n):\n    if n == 1:\n        return 1\n    else:\n        return sum(bell_number(i) * bell_number(n-i-1) for i in range(n))
68,"[0, 0, 0]",0,0/3,def is_monotonic(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))
69,"[1, 0, 1]",0,2/3,"def is_sublist(my_list, sublist):\n    return sublist in my_list"
70,"[1, 1, 1]",1,3/3,"def get_equal(my_tuples, expected_length):\n    return 'All tuples have same length' if len(set(map(len, my_tuples))) == 1 and len(my_tuples[0]) == expected_length else 'All tuples do not have same length'"
71,"[1, 1, 1]",1,3/3,"def comb_sort(my_list):\n    gap = len(my_list)\n    swapped = True\n    while gap != 1 or swapped:\n        gap = int(gap / 1.247330950103979)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(len(my_list) - gap):\n            if my_list[i] > my_list[i + gap]:\n                my_list[i], my_list[i + gap] = my_list[i + gap], my_list[i]\n                swapped = True\n    return my_list"
72,"[1, 0, 1]",0,2/3,"def dif_Square(n):\n    for i in range(int(n**0.5), 0, -1):\n        j = n - i**2\n        if j >= 0 and j == int(j):\n            return True\n    return False"
73,"[0, 0, 0]",0,0/3,"import re\n\ndef multiple_split(string, delimiters):\n    return re.split(r'(' + '|'.join(delimiters) + r')', string)"
74,"[0, 1, 1]",0,2/3,"def is_samepatterns(patterns, strs):\n    for i in range(len(patterns) - 1):\n        if patterns[i] != patterns[i + 1]:\n            return False\n    return True"
75,"[0, 0, 0]",0,0/3,"def find_tuples(tuples, k):\n    return [tuple(i for i in tup if i % k == 0) for tup in tuples if any(i % k == 0 for i in tup)]"
76,"[0, 0, 0]",0,0/3,"def count_squares(width, height):\n    return width * height"
77,"[0, 0, 0]",0,0/3,def is_diff(n):\n    even_sum = sum([int(i) for i in str(n) if int(i) % 2 == 0])\n    odd_sum = sum([int(i) for i in str(n) if int(i) % 2 == 1])\n    return even_sum != odd_sum
78,"[1, 1, 1]",1,3/3,"def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 == 1:\n            count += 1\n    return count"
79,"[1, 1, 1]",1,3/3,def word_len(word):\n    return len(word) % 2 == 1
80,"[0, 0, 0]",0,0/3,def tetrahedral_number(n):\n    return (n * (n + 1)) / 2
81,"[0, 0, 0]",0,0/3,"def zip_tuples(tuple1, tuple2):\n    return list(zip(tuple1, tuple2))"
82,"[1, 1, 1]",1,3/3,import math\n\ndef volume_sphere(radius):\n    return (4.0/3.0) * math.pi * radius ** 3
83,"[0, 0, 0]",0,0/3,def get_char(s):\n    return chr(sum([ord(c) for c in s]))
84,"[0, 1, 1]",0,2/3,"def sequence(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"
85,"[1, 1, 1]",1,3/3,import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2
86,"[0, 0, 0]",0,0/3,def centered_hexagonal_number(n):\n    return (n * (n + 1)) // 2
87,"[1, 0, 0]",0,1/3,"def merge_dictionaries_three(dict1, dict2, dict3):\n    result = {}\n    for d in (dict1, dict2, dict3):\n        result.update(d)\n    return result"
88,"[1, 1, 1]",1,3/3,def freq_count(my_list):\n    frequency = {}\n    for item in my_list:\n        if item not in frequency:\n            frequency[item] = 0\n        frequency[item] += 1\n    return frequency
89,"[1, 0, 0]",0,1/3,def closest_num(n):\n    return int(n/10) * 10
90,"[1, 1, 1]",1,3/3,def len_log(my_list):\n    return max(len(word) for word in my_list)
91,"[1, 1, 1]",1,3/3,"def find_substring(my_list, substring):\n    for word in my_list:\n        if substring in word:\n            return True\n    return False"
92,"[1, 1, 1]",1,3/3,"def is_undulating(num_str):\n    num_list = list(map(int, num_str))\n    for i in range(len(num_list) - 1):\n        if num_list[i] == num_list[i+1]:\n            return False\n    return True"
93,"[1, 1, 1]",1,3/3,"def power(a, b):\n    return a ** b"
94,"[1, 1, 1]",1,3/3,"def index_minimum(my_tuples):\n    return min(my_tuples, key=lambda x: x[1])[0]"
95,"[1, 1, 1]",1,3/3,def Find_Min_Length(my_list):\n    return min(len(sublist) for sublist in my_list)
96,"[1, 1, 1]",1,3/3,"def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
97,"[1, 1, 1]",1,3/3,"def frequency_lists(my_list):\n    frequency = {}\n    for sublist in my_list:\n        for item in sublist:\n            frequency[item] = frequency.get(item, 0) + 1\n    return frequency"
98,"[0, 0, 0]",0,0/3,def multiply_num(my_list):\n    return sum(my_list) / len(my_list)
99,"[1, 1, 1]",1,3/3,def decimal_to_binary(n):\n    return bin(n)[2:]
100,"[0, 0, 0]",0,0/3,def next_smallest_palindrome(n):\n    str_n = str(n)\n    is_palindrome = str_n == str_n[::-1]\n    if is_palindrome:\n        return int(str_n[1:] + str_n[0])\n    else:\n        return int(str_n + str_n[::-1])
101,"[0, 0, 0]",0,0/3,"def kth_element(arr, k, n):\n    return arr[k-1]"
102,"[0, 0, 0]",0,0/3,def snake_to_camel(snake_case_string):\n    words = snake_case_string.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])
103,"[0, 0, 0]",0,0/3,"def eulerian_num(n, m):\n    return (n * (n - 1) // 2) ** m"
104,"[0, 0, 0]",0,0/3,"def sort_sublists(my_list):\n    return [[sorted(sublist, key=lambda x: x.lower())] for sublist in my_list]"
105,"[1, 1, 1]",1,3/3,def count(my_list):\n    return sum(my_list)
106,"[0, 0, 0]",0,0/3,"def add_lists(my_list, my_tuple):\n    return my_tuple + my_list"
107,"[1, 0, 0]",0,1/3,"def count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if hex(i).startswith('0x'):\n            count += 1\n    return count"
108,"[0, 0, 0]",0,0/3,def merge_sorted_list(lists):\n    merged_list = []\n    for l in lists:\n        merged_list.extend(l)\n    merged_list.sort()\n    return merged_list
109,"[1, 1, 1]",1,3/3,"def odd_Equivalent(binary_string, n):\n    count = 0\n    for i in range(n):\n        if int(binary_string, 2) % 2 == 1:\n            count += 1\n        binary_string = binary_string[1:] + binary_string[0]\n    return count"
110,"[0, 0, 0]",0,0/3,"def extract_missing(ranges, start, end):\n    missing_ranges = []\n    for i in range(start, end+1):\n        if not any(i in range(start, end+1) for start, end in ranges):\n            missing_ranges.append((i, i))\n    return missing_ranges"
111,"[0, 1, 1]",0,2/3,"def common_in_nested_lists(nested_lists):\n    common_elements = []\n    for i in range(len(nested_lists)):\n        for j in range(i+1, len(nested_lists)):\n            common_elements = [x for x in nested_lists[i] if x in nested_lists[j]]\n    return common_elements"
112,"[1, 1, 1]",1,3/3,"def perimeter(radius, height):\n    return 2 * (radius + height)"
113,"[1, 1, 1]",1,3/3,def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False
114,"[0, 0, 0]",0,0/3,"def assign_freq(tuple_list):\n    result = []\n    for tuple in tuple_list:\n        freq = tuple.count(tuple[0])\n        result.append((tuple[0], freq))\n    return result"
115,"[1, 1, 1]",1,3/3,def empty_dit(my_list):\n    return all(not my_dict for my_dict in my_list)
116,"[1, 1, 1]",1,3/3,"def tuple_to_int(my_tuple):\n    return int(''.join(map(str, my_tuple)))"
117,"[0, 0, 0]",0,0/3,"def list_to_float(my_list):\n    return [(float(i[0]), float(i[1])) for i in my_list]"
118,"[1, 1, 1]",1,3/3,def string_to_list(my_string):\n    return my_string.split()
119,"[0, 0, 0]",0,0/3,"def search(arr, n):\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]"
120,"[1, 1, 1]",1,3/3,"def max_product_tuple(my_list):\n    return max(map(lambda x: x[0] * x[1], my_list))"
121,"[1, 0, 0]",0,1/3,"def check_triplet(arr, a, b, c):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == a + b + c:\n                    return True\n    return False"
122,"[1, 0, 0]",0,1/3,def smartNumber(n):\n    if n == 1:\n        return 30\n    else:\n        return smartNumber(n-1) + 10
123,"[0, 0, 0]",0,0/3,"def amicable_numbers_sum(n):\n    def sum_of_divisors(num):\n        return sum([i for i in range(1, num + 1) if num % i == 0])\n\n    amicable_numbers = []\n    for i in range(1, n + 1):\n        if i != sum_of_divisors(i):\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)"
124,"[0, 0, 0]",0,0/3,"import cmath\n\ndef angle_complex(real, imag):\n    return cmath.phase(complex(real, imag))"
125,"[0, 0, 0]",0,0/3,"def find_length(binary_string, k):\n    max_diff = 0\n    for i in range(len(binary_string) - k + 1):\n        num_0s = binary_string[i:i+k].count('0')\n        num_1s = k - num_0s\n        diff = abs(num_0s - num_1s)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
126,"[0, 0, 0]",0,0/3,"def sum(num1, num2):\n    common_divisors = []\n    for i in range(1, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
127,"[0, 0, 0]",0,0/3,"def multiply_int(a, b):\n    result = 0\n    while a > 0:\n        if a % 2 == 0:\n            result += b\n        else:\n            result += b * 2\n        a //= 2\n        b *= 2\n    return result"
128,"[1, 1, 1]",1,3/3,"def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]"
129,"[1, 1, 1]",1,3/3,def magic_square_test(matrix):\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n\n    # Check if the sums of the rows and columns are equal\n    if row_sums == col_sums:\n        # Check if the diagonal elements are equal\n        diag1 = matrix[0][0] + matrix[1][1] + matrix[2][2]\n        diag2 = matrix[0][2] + matrix[1][1] + matrix[2][0]\n        if diag1 == diag2:\n            return True\n\n    return False
130,"[0, 0, 0]",0,0/3,"def max_occurrences(my_list):\n    return max(my_list, key=my_list.count)"
131,"[0, 0, 0]",0,0/3,"def reverse_vowels(string):\n    vowels = ""aeiouAEIOU""\n    reversed_vowels = """".join(reversed(vowels))\n    return """".join(c if c not in vowels else reversed_vowels[vowels.index(c)] for c in string)"
132,"[1, 1, 1]",1,3/3,"def tup_string(my_tuple):\n    return """".join(my_tuple)"
133,"[1, 1, 1]",1,3/3,"def sum_negativenum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))"
134,"[0, 0, 1]",0,1/3,"def check_last(arr, p, x):\n    for i in range(p):\n        arr.append(arr[-1] * x)\n    return ""EVEN"" if arr[-1] % 2 == 0 else ""ODD"""
135,"[0, 0, 0]",0,0/3,def hexagonal_num(n):\n    return int((n * (n + 1)) / 2)
136,"[0, 0, 0]",0,0/3,def cal_electbill(kWh):\n    return kWh * 0.15 + 0.2
137,"[0, 1, 1]",0,2/3,def zero_count(my_list):\n    count = 0\n    for i in my_list:\n        if i == 0:\n            count += 1\n    return count / len(my_list)
138,"[0, 1, 0]",0,1/3,def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n    return True
139,"[0, 0, 0]",0,0/3,import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius
140,"[0, 0, 0]",0,0/3,"def extract_singly(tuple_list):\n    result = []\n    for tup in tuple_list:\n        for i, elem in enumerate(tup):\n            if tup.index(elem) == i:\n                result.append(elem)\n    return result"
141,"[0, 0, 0]",0,0/3,"def pancake_sort(my_list):\n    for i in range(len(my_list), 1, -1):\n        if my_list[i-1] > my_list[0]:\n            my_list = my_list[:i] + my_list[i:]\n    return my_list"
142,"[1, 1, 1]",1,3/3,"def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
143,"[1, 1, 0]",0,2/3,"def find_lists(my_tuple):\n    return len([x for x in my_tuple if isinstance(x, list)])"
144,"[1, 1, 1]",1,3/3,"def sum_Pairs(arr, n):\n    return sum([abs(arr[i] - arr[j]) for i in range(n) for j in range(i+1, n)])"
145,"[1, 1, 1]",1,3/3,"def max_Abs_Diff(arr, n):\n    return max(abs(arr[i] - arr[j]) for i in range(n) for j in range(i+1, n))"
146,"[0, 0, 0]",0,0/3,def ascii_value_string(input_string):\n    total_ascii_value = 0\n    for char in input_string:\n        total_ascii_value += ord(char)\n    return total_ascii_value
147,"[0, 0, 0]",0,0/3,"[PYTHON]\ndef max_path_sum(triangle, row, col):\n    # Initialize the maximum total path sum to the current element\n    max_sum = triangle[row][col]\n\n    # Check if the current element is not the first one in the row\n    if col > 0:\n        # Calculate the maximum total path sum for the left sub-path\n        left_sum = max_path_sum(triangle, row, col - 1)\n        # Update the maximum total path sum if the left sub-path is greater\n        max_sum = max(max_sum, left_sum + triangle[row][col])\n\n    # Check if the current element is not the last one in the row\n    if col < len(triangle[row]) - 1:\n        # Calculate the maximum total path sum for the right sub"
148,"[0, 0, 0]",0,0/3,def sum_digits_twoparts(n):\n    digits = [int(d) for d in str(n)]\n    return max(digits[i] + digits[-i-1] for i in range(len(digits)//2))
149,"[0, 0, 0]",0,0/3,"def longest_subseq_with_diff_one(arr, n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(1, dp[i - 1] + 1)\n        for j in range(i - 1, -1, -1):\n            if arr[i] - arr[j] == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n]"
150,"[0, 1, 1]",0,2/3,"def does_Contain_B(n, a, b):\n    for i in range(n):\n        if (i * a + b) % 2 == 0:\n            return True\n    return False"
151,"[1, 0, 0]",0,1/3,"def is_coprime(a, b):\n    return (a * b) % 2 == 1"
152,"[0, 0, 0]",0,0/3,[PYTHON]\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):
153,"[0, 0, 0]",0,0/3,"def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = c / a\n    return (x, y)"
154,"[1, 1, 1]",1,3/3,"def specified_element(my_list, index):\n    return [sublist[index] for sublist in my_list]"
155,"[0, 0, 0]",0,0/3,def even_bit_toggle_number(n):\n    return n ^ 0xAAAAAAAA
156,"[0, 0, 0]",0,0/3,def tuple_int_str(my_tuple):\n    return tuple((int(i) for i in t) for t in my_tuple)
157,"[0, 0, 1]",0,1/3,"def encode_list(my_list):\n    result = []\n    for i in range(len(my_list)):\n        count = 1\n        while i + count < len(my_list) and my_list[i] == my_list[i + count]:\n            count += 1\n        result.append([count, my_list[i]])\n        i += count - 1\n    return result"
158,"[0, 0, 0]",0,0/3,"def min_Ops(arr, k, n):\n    # Initialize result\n    result = 0\n\n    # Loop through the array\n    for i in range(n):\n        # Check if the element is not equal to k\n        if arr[i] != k:\n            # Increment the result\n            result += 1\n\n    # Return the result\n    return result"
159,"[0, 0, 0]",0,0/3,"def month_season(month, day):\n    if month == 'December' or month == 'January' or month == 'February':\n        if day >= 21:\n            return 'winter'\n        else:\n            return 'autumn'\n    elif month == 'March' or month == 'April' or month == 'May':\n        return 'spring'\n    else:\n        return 'summer'"
160,"[0, 0, 0]",0,0/3,"def solution(a, b, n):\n    x = (n - b * y) // a\n    y = (n - a * x) // b\n    if x >= 0 and y >= 0:\n        return ('x = ', x, ', y = ', y)\n    else:\n        return 'No solution'"
161,"[1, 1, 1]",1,3/3,"def remove_elements(my_list, elements_to_remove):\n    return [x for x in my_list if x not in elements_to_remove]"
162,"[0, 0, 0]",0,0/3,def sum_series(n):\n    sum = 0\n    for i in range(n):\n        sum += i + (i - 2)\n    return sum
163,"[0, 0, 0]",0,0/3,"import math\n\ndef area_polygon(sides, side_length):\n    return sides * side_length * math.sin(math.pi / sides)"
164,"[1, 1, 0]",0,2/3,"def areEquivalent(a, b):\n    return sum(i for i in range(1, a + 1) if a % i == 0) == sum(i for i in range(1, b + 1) if b % i == 0)"
165,"[0, 0, 0]",0,0/3,def count_char_position(string):\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count
166,"[0, 0, 1]",0,1/3,"def find_even_Pair(arr, x):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] ^ arr[j]) == x:\n                count += 1\n    return count"
167,"[1, 1, 1]",1,3/3,def next_Power_Of_2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power
168,"[1, 1, 1]",1,3/3,"def frequency(arr, num):\n    return arr.count(num)"
169,"[0, 0, 0]",0,0/3,def get_pell(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 * get_pell(n-1) + get_pell(n-2)
170,"[1, 1, 1]",1,3/3,"def sum_range_list(my_list, start, end):\n    return sum(my_list[start:end+1])"
171,"[1, 1, 1]",1,3/3,def perimeter_pentagon(side_length):\n    return side_length * 5
172,"[1, 1, 1]",1,3/3,"def count_occurance(string):\n    return string.count(""std"")"
173,"[1, 1, 1]",1,3/3,"import re\n\ndef remove_splchar(string):\n    return re.sub(r'[^a-zA-Z0-9]', '', string)"
174,"[1, 1, 1]",1,3/3,"def group_keyvalue(keyvalue_list):\n    result = {}\n    for key, value in keyvalue_list:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result"
175,"[1, 1, 1]",1,3/3,"def is_valid_parenthese(s):\n    stack = []\n    for char in s:\n        if char == ""("" or char == ""["" or char == ""{"":\n            stack.append(char)\n        elif char == "")"" or char == ""]"" or char == ""}"":\n            if not stack:\n                return False\n            top = stack.pop()\n            if (char == "")"" and top != ""("") or (char == ""]"" and top != ""["") or (char == ""}"" and top != ""{""):\n                return False\n    return not stack"
176,"[1, 1, 1]",1,3/3,"def perimeter_triangle(side1, side2, side3):\n    return side1 + side2 + side3"
177,"[0, 0, 0]",0,0/3,"def answer(a, b):\n    for i in range(a, b+1):\n        if i % a == 0 and i % b == 0:\n            return (a, b)\n    return (a, b)"
178,"[1, 1, 1]",1,3/3,"def string_literals(literals, string):\n    for literal in literals:\n        if literal in string:\n            return ""Matched!""\n    return ""Not Matched!"""
179,"[0, 1, 0]",0,1/3,def is_num_keith(n):\n    return n == sum(int(i) for i in str(n))
180,"[0, 0, 0]",0,0/3,"import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    earth_radius = 6371\n    dlat = math.radians(lat2-lat1)\n    dlon = math.radians(lon2-lon1)\n    a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(lat1)) \\* math.cos(math.radians(lat2)) * math.sin(dlon/2) * math.sin(dlon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = earth_radius * c\n    return d"
181,"[0, 0, 0]",0,0/3,"def common_prefix(my_list):\n    if not my_list:\n        return """"\n    shortest_str = min(my_list, key=len)\n    for i, char in enumerate(shortest_str):\n        for other in my_list:\n            if other[i] != char:\n                return shortest_str[:i]\n    return shortest_str"
182,"[1, 0, 0]",0,1/3,"import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_characters = re.findall(r'[^a-zA-Z0-9]', string)\n    numbers = re.findall(r'[0-9]', string)\n    return (uppercase, lowercase, special_characters, numbers)"
183,"[0, 0, 0]",0,0/3,"def count_pairs(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count"
184,"[1, 0, 1]",0,2/3,"def greater_specificnum(my_list, num):\n    return any(x > num for x in my_list)"
185,"[0, 0, 0]",0,0/3,"def parabola_focus(a, b, c):\n    focus_x = (-b/(2*a))\n    focus_y = (focus_x**2) + (c/a)\n    return (focus_x, focus_y)"
186,"[1, 1, 1]",1,3/3,"import re\n\ndef check_literals(string, literals):\n    for literal in literals:\n        if re.search(literal, string):\n            return 'Matched!'\n    return 'Not Matched!'"
187,"[0, 0, 0]",0,0/3,"def longest_common_subsequence(seq1, seq2):\n    m = len(seq1)\n    n = len(seq2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if seq1[i - 1] == seq2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]"
188,"[0, 1, 1]",0,2/3,"def prod_Square(n):\n    for i in range(1, int(n ** 0.5) + 1):\n        j = int((n - i ** 2) ** 0.5)\n        if i ** 2 + j ** 2 == n:\n            return True\n    return False"
189,"[0, 0, 0]",0,0/3,"def first_missing_positive(nums, n):\n    for i in range(len(nums)):\n        if nums[i] <= 0 or nums[i] > n:\n            continue\n        if i + 1 != nums[i]:\n            return i + 1\n    return n + 1"
190,"[0, 1, 0]",0,1/3,"def count_Intgral_Points(x1, y1, x2, y2):\n    count = 0\n    for i in range(x1, x2+1):\n        for j in range(y1, y2+1):\n            if i == x1 or i == x2 or j == y1 or j == y2:\n                count += 1\n    return count"
191,"[0, 1, 1]",0,2/3,"def check_monthnumber(month_name):\n    month_names = [""January"", ""March"", ""May"", ""July"", ""August"", ""October"", ""December""]\n    if month_name in month_names:\n        return False\n    else:\n        return True"
192,"[0, 0, 0]",0,0/3,def check_string(s):\n    return any(c.isdigit() for c in s) and any(c.isalpha() for c in s)
193,"[1, 1, 1]",1,3/3,def remove_tuple(my_tuple):\n    return tuple(set(my_tuple))
194,"[0, 0, 0]",0,0/3,"def octal_To_Decimal(octal_number):\n    return int(octal_number, 8)"
195,"[1, 1, 1]",1,3/3,"def first(arr, element, index):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
196,"[1, 1, 1]",1,3/3,"def remove_tuples(my_list, k):\n    return [x for x in my_list if len(x) != k]"
197,"[1, 1, 1]",1,3/3,"def find_exponentio(nums1, nums2):\n    return tuple(x ** y for x, y in zip(nums1, nums2))"
198,"[0, 0, 0]",0,0/3,"import math\n\ndef largest_triangle(a, b):\n    return 2 * math.sqrt(a * b)"
199,"[1, 1, 1]",1,3/3,def highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    power = 0\n    while n > 0:\n        n >>= 1\n        power += 1\n    return 2 ** (power - 1)
200,"[1, 1, 1]",1,3/3,"def position_max(my_list):\n    return [i for i, x in enumerate(my_list) if x == max(my_list)]"
201,"[1, 1, 1]",1,3/3,def chkList(myList):\n    return len(set(myList)) == 1
202,"[0, 0, 0]",0,0/3,"def remove_even(s):\n    return """".join(c for i, c in enumerate(s) if i % 2 == 1)"
203,"[1, 1, 1]",1,3/3,"def hamming_Distance(x, y):\n    return bin(x ^ y).count('1')"
204,"[1, 1, 1]",1,3/3,"def count(string, char):\n    return string.count(char)"
205,"[0, 0, 0]",0,0/3,"def inversion_elements(my_tuple):\n    return tuple(sorted(my_tuple, reverse=True))"
206,"[0, 0, 0]",0,0/3,"def concatenate_elements(my_tuple):\n    return tuple([f""{my_tuple[i]} {my_tuple[i+1]}"" for i in range(len(my_tuple)-1)])"
207,"[0, 0, 0]",0,0/3,"def find_longest_repeating_subseq(s):\n    longest = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] != s[j]:\n                longest = max(longest, j - i)\n    return longest"
208,"[1, 1, 1]",1,3/3,"import re\n\ndef is_decimal(decimal):\n    pattern = r""^\\d+(\\.\\d{2})?$""\n    return re.match(pattern, decimal) is not None"
209,"[0, 0, 0]",0,0/3,"def heap_replace(heap, new_item):\n    smallest = heap[0]\n    heap[0] = new_item\n    heapify(heap)\n    return heap"
210,"[1, 1, 1]",1,3/3,"import re\n\ndef is_allowed_specific_char(string):\n    pattern = r""^[a-zA-Z0-9]+$""\n    return re.match(pattern, string) is not None"
211,"[0, 0, 0]",0,0/3,"def count_Num(n):\n    count = 0\n    for i in range(1, n+1):\n        if i & 1 and i & 2:\n            count += 1\n    return count"
212,"[1, 1, 1]",1,3/3,"def fourth_Power_Sum(n):\n    return sum([i**4 for i in range(1, n+1)])"
213,"[1, 1, 1]",1,3/3,"def concatenate_strings(tuple1, tuple2):\n    return tuple(x + y for x, y in zip(tuple1, tuple2))"
214,"[1, 1, 1]",1,3/3,def degree_radian(radians):\n    return radians * (180 / math.pi)
215,"[0, 0, 1]",0,1/3,"def decode_list(my_list):\n    result = []\n    for item in my_list:\n        if isinstance(item, list):\n            result.extend([item[0]] * item[1])\n        else:\n            result.append(item)\n    return result"
216,"[1, 0, 1]",0,2/3,"def check_subset_list(nested_list1, nested_list2):\n    for i in nested_list1:\n        if i not in nested_list2:\n            return False\n    return True"
217,"[0, 0, 0]",0,0/3,def first_repeated_char(s):\n    for i in range(len(s)):\n        if s[i] in s[i+1:]:\n            return s[i]\n    return '\\0'
218,"[0, 0, 0]",0,0/3,"def min_operations(num1, num2):\n    return abs(num1 - num2)"
219,"[0, 0, 0]",0,0/3,"def extract_min_max(my_tuple, k):\n    return sorted(my_tuple)[:k] + sorted(my_tuple)[-k:]"
220,"[0, 0, 1]",0,1/3,"def replace_max_specialchar(string, n):\n    special_chars = [' ', ',', '.']\n    replaced_string = string\n    for char in special_chars:\n        count = replaced_string.count(char)\n        if count > n:\n            replaced_string = replaced_string.replace(char, ':', n)\n    return replaced_string"
221,"[1, 1, 1]",1,3/3,def first_even(my_list):\n    for num in my_list:\n        if num % 2 == 0:\n            return num\n    return None
222,"[1, 1, 1]",1,3/3,def check_type(my_tuple):\n    data_types = set()\n    for element in my_tuple:\n        data_types.add(type(element))\n    return len(data_types) <= 1
223,"[1, 0, 1]",0,2/3,"def is_majority(arr, n, k):\n    left = 0\n    right = n - 1\n    while left <= right:\n        if arr[left] == k and arr[right] == k:\n            return True\n        if arr[left] != k:\n            left += 1\n        if arr[right] != k:\n            right -= 1\n    return False"
224,"[0, 0, 0]",0,0/3,def count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count
225,"[0, 0, 0]",0,0/3,"def find_min(arr, start, end):\n    if start > end:\n        return -1\n    if arr[start] < arr[end]:\n        return arr[start]\n    mid = (start + end) // 2\n    if arr[mid] < arr[end]:\n        return find_min(arr, mid + 1, end)\n    else:\n        return find_min(arr, start, mid - 1)"
226,"[1, 1, 1]",1,3/3,"def odd_values_string(input_string):\n    return ''.join([char for index, char in enumerate(input_string) if index % 2 == 0])"
227,"[1, 1, 1]",1,3/3,"def min_of_three(a, b, c):\n    return min(a, b, c)"
228,"[0, 0, 1]",0,1/3,"def all_Bits_Set_In_The_Given_Range(n, start, end):\n    for i in range(start, end+1):\n        if (n & (1 << i)) == 0:\n            return False\n    return True"
229,"[0, 1, 1]",0,2/3,"def re_arrange_array(arr, n):\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    return negative + positive"
230,"[1, 1, 1]",1,3/3,"def replace_blank(string, replacement_char):\n    return string.replace("" "", replacement_char)"
231,"[0, 0, 0]",0,0/3,"[PYTHON]\ndef max_sum(triangle, k):\n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n    row_index = 0\n\n    # Iterate through the rows of the triangle\n    while row_index < len(triangle):\n        # Get the current row\n        row = triangle[row_index]\n\n        # Initialize the column index\n        col_index = 0\n\n        # Iterate through the columns of the current row\n        while col_index < len(row):\n            # Get the current element\n            element = row[col_index]\n\n            # Update the current sum\n            current_sum += element\n\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum"
232,"[1, 1, 1]",1,3/3,"def larg_nnum(dataset, n):\n    return sorted(dataset, reverse=True)[:n]"
233,"[0, 0, 0]",0,0/3,"def lateralsuface_cylinder(radius, height):\n    return 2 * 3.14 * radius * (radius + height)"
234,"[1, 1, 1]",1,3/3,def volume_cube(side_length):\n    return side_length ** 3
235,"[0, 0, 0]",0,0/3,def even_bit_set_number(n):\n    return n | 0xAAAAAAAA
236,"[0, 0, 1]",0,1/3,"def No_of_Triangle(side, height):\n    if side < 3 or height < 3:\n        return -1\n    else:\n        return (side - 2) * (height - 2)"
237,"[0, 0, 0]",0,0/3,def check_occurences(my_tuples):\n    result = {}\n    for tup in my_tuples:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result
238,"[0, 0, 0]",0,0/3,"def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j] != """":\n                count += 1\n    return count"
239,"[0, 0, 0]",0,0/3,"def get_total_number_of_sequences(n, m):\n    # Initialize the total number of sequences to 0\n    total = 0\n\n    # Loop through all possible starting values\n    for i in range(1, m + 1):\n        # Calculate the number of sequences for this starting value\n        num_seq = (m - i + 1) * (n - 1)\n\n        # Add the number of sequences to the total\n        total += num_seq\n\n    return total"
240,"[0, 0, 0]",0,0/3,"def replace_list(my_list, new_list):\n    my_list[-1] = new_list\n    return my_list"
241,"[0, 0, 0]",0,0/3,"def array_3d(m, n, p):\n    return [[['*' for _ in range(n)] for _ in range(m)] for _ in range(p)]"
242,"[1, 1, 1]",1,3/3,def count_charac(my_string):\n    return len(my_string)
243,"[0, 0, 0]",0,0/3,"def sort_on_occurence(my_list):\n    result = []\n    for i in my_list:\n        result.append((i[0], i[1]))\n    result.sort(key=lambda x: x[0])\n    return result"
244,"[0, 0, 0]",0,0/3,def next_perfect_square(n):\n    while True:\n        n += 1\n        root = n ** 0.5\n        if root == int(root):\n            return n
245,"[0, 0, 0]",0,0/3,"def max_sum(arr, n):\n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n\n    # Loop through the array\n    for i in range(n):\n        # Check if the current sum is greater than the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Check if the current element is negative\n        if arr[i] < 0:\n            # If it is, reset the current sum to 0\n            current_sum = 0\n        else:\n            # Otherwise, add the current element to the current sum\n            current_sum += arr[i]\n\n    # Return the max sum\n    return max_sum"
246,"[0, 0, 0]",0,0/3,def babylonian_squareroot(n):\n    x = n\n    while abs(x - n/x) > 1e-6:\n        x = (x + n/x) / 2\n    return x
247,"[0, 0, 0]",0,0/3,"[PYTHON]\ndef lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 2, n):\n            if s[i] == s[j]:\n                dp[i][j] = max(dp[i + 1][j - 1] + 2, dp[i][j - 1])\n            else:"
248,"[1, 1, 1]",1,3/3,"def harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))"
249,"[1, 1, 1]",1,3/3,"def intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))"
250,"[1, 1, 1]",1,3/3,"def count_X(my_tuple, element):\n    return my_tuple.count(element)"
251,"[0, 0, 0]",0,0/3,"def insert_element(my_list, element):\n    return [element] + my_list + [element]"
252,"[1, 1, 1]",1,3/3,"def convert(num):\n    return (num.real**2 + num.imag**2)**0.5, (num.imag/num.real)"
253,"[1, 1, 1]",1,3/3,"def count_integer(my_list):\n    return len([x for x in my_list if isinstance(x, int)])"
254,"[0, 0, 0]",0,0/3,"def words_ae(input_string):\n    words = input_string.split()\n    return [word for word in words if word.startswith(('a', 'e'))]"
255,"[1, 0, 0]",0,1/3,"import itertools\n\ndef combinations_colors(colors, n):\n    return [tuple(c) for c in itertools.combinations(colors, n)]"
256,"[1, 1, 1]",1,3/3,"def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            sieve[i * i::i] = [False] * ((n - i * i - 1) // i + 1)\n    return sum(sieve)"
257,"[1, 1, 1]",1,3/3,"def swap_numbers(num1, num2):\n    return (num2, num1)"
258,"[0, 0, 0]",0,0/3,def count_odd(my_list):\n    return len([x for x in my_list if lambda x: x % 2 != 0])
259,"[0, 0, 0]",0,0/3,"def maximize_elements(tuples1, tuples2):\n    result = []\n    for i in range(len(tuples1)):\n        tuple1 = tuples1[i]\n        tuple2 = tuples2[i]\n        result.append((max(tuple1[0], tuple2[0]), max(tuple1[1], tuple2[1])))\n    return result"
260,"[0, 0, 0]",0,0/3,"def newman_prime(n):\n    if n == 1:\n        return 1\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return None\n        return n"
261,"[1, 1, 1]",1,3/3,"def division_elements(tuple1, tuple2):\n    return tuple(x // y for x, y in zip(tuple1, tuple2))"
262,"[1, 1, 1]",1,3/3,"def split_two_parts(my_list, n):\n    return my_list[:n], my_list[n:]"
263,"[1, 1, 1]",1,3/3,"def merge_dict(dict1, dict2):\n    result = {}\n    for key in dict1:\n        result[key] = dict1[key]\n    for key in dict2:\n        result[key] = dict2[key]\n    return result"
264,"[0, 0, 0]",0,0/3,def dog_age(human_age):\n    return human_age * 7
265,"[0, 0, 0]",0,0/3,"def list_split(my_list, n):\n    return [my_list[i:i+n] for i in range(0, len(my_list), n)]"
266,"[0, 0, 0]",0,0/3,def lateralsurface_cube(side_length):\n    return 6 * side_length ** 2
267,"[0, 0, 0]",0,0/3,"def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
268,"[0, 0, 0]",0,0/3,def find_star_num(n):\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + (n-1)*10
269,"[1, 1, 1]",1,3/3,def ascii_value(char):\n    return ord(char)
270,"[1, 1, 1]",1,3/3,"def sum_even_and_even_index(my_list, n):\n    return sum(my_list[i] for i in range(n) if i % 2 == 0 and my_list[i] % 2 == 0)"
271,"[0, 0, 0]",0,0/3,"def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n*2, 2):\n        sum += i ** 5\n    return sum"
272,"[1, 1, 1]",1,3/3,def rear_extract(records):\n    return [record[2] for record in records]
273,"[1, 1, 1]",1,3/3,"def substract_elements(tuple1, tuple2):\n    return tuple(i - j for i, j in zip(tuple1, tuple2))"
274,"[0, 0, 0]",0,0/3,"def even_binomial_Coeff_Sum(n):\n    return sum(binomial_coeff(n, i) for i in range(n) if i % 2 == 0)\n\ndef binomial_coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_coeff(n - 1, k - 1) + binomial_coeff(n - 1, k)"
275,"[1, 1, 0]",0,2/3,"def get_Position(arr, val, pos):\n    return pos"
276,"[0, 0, 0]",0,0/3,"def volume_cylinder(radius, height):\n    return 3.14 * radius ** 2 * height"
277,"[1, 1, 1]",1,3/3,"def dict_filter(my_dict, min_value):\n    return {key: value for key, value in my_dict.items() if value >= min_value}"
278,"[0, 0, 0]",0,0/3,"def count_first_elements(my_tuple):\n    count = 0\n    for i in range(len(my_tuple)):\n        if not isinstance(my_tuple[i], tuple):\n            count += 1\n    return count"
279,"[0, 0, 0]",0,0/3,def is_num_decagonal(n):\n    return n * (n + 1) * (2 * n + 1) // 6
280,"[1, 1, 1]",1,3/3,"def sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)"
281,"[1, 1, 1]",1,3/3,def all_unique(my_list):\n    return len(my_list) == len(set(my_list))
282,"[1, 1, 1]",1,3/3,"def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))"
283,"[1, 1, 1]",1,3/3,def validate(num):\n    str_num = str(num)\n    for i in range(len(str_num)):\n        if str_num.count(str_num[i]) > int(str_num[i]):\n            return False\n    return True
284,"[1, 1, 1]",1,3/3,"def check_element(my_list, element):\n    return all(x == element for x in my_list)"
285,"[1, 1, 1]",1,3/3,"def text_match_two_three(text):\n    pattern = r""a(bb{2,3})""\n    if re.search(pattern, text):\n        return ""Found a match!""\n    else:\n        return ""Not matched!"""
286,"[0, 0, 0]",0,0/3,"def max_sub_array_sum_repeated(arr, k, n):\n    # Find the maximum sum of a contiguous subarray in the given array\n    # that is repeated k times\n    max_sum = 0\n    for i in range(len(arr)):\n        curr_sum = 0\n        for j in range(i, len(arr)):\n            curr_sum += arr[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum * k"
287,"[0, 0, 0]",0,0/3,"def square_Sum(n):\n    return sum([i**2 for i in range(2, n+1, 2)])"
288,"[0, 0, 0]",0,0/3,"def modular_inverse(arr, p, mod):\n    return sum(1 for i in arr if pow(i, mod-2, mod) == p)"
289,"[0, 1, 0]",0,1/3,"def odd_Days(year):\n    return sum(map(lambda m: m % 2, range(1, 12)))"
290,"[0, 0, 0]",0,0/3,"def max_length(my_list):\n    return max(my_list, key=len)"
291,"[0, 0, 0]",0,0/3,"[PYTHON]\ndef count_no_of_ways(n, k):\n    # Initialize the dp array\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    # Loop through the posts\n    for i in range(1, n + 1):\n        # Loop through the colors\n        for j in range(1, k + 1):\n            # If the current post is the first post or the previous post is not the same color,\n            # then the current post can be painted with any color\n            if i == 1 or dp[i - 1] != j:\n                dp[i] += 1\n            # If the current post is not the first post and the previous post is the same color,\n            # then the current post can be painted with any"
292,"[1, 1, 1]",1,3/3,"def find(a, b):\n    return a // b"
293,"[1, 1, 1]",1,3/3,"def otherside_rightangle(base, height):\n    return (base ** 2 + height ** 2) ** 0.5"
294,"[0, 0, 0]",0,0/3,def max_val(my_list):\n    return max(my_list)
295,"[0, 0, 0]",0,0/3,"def sum_div(n):\n    return sum([i for i in range(1, n+1) if n % i == 0])"
296,"[1, 1, 1]",1,3/3,"def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
297,"[1, 1, 1]",1,3/3,"def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
298,"[0, 0, 0]",0,0/3,"def intersection_nested_lists(list1, list2):\n    result = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            result.append(intersection_nested_lists(sublist, list2))\n        else:\n            if sublist in list2:\n                result.append([sublist])\n    return result"
299,"[0, 0, 0]",0,0/3,"def max_aggregate(my_list):\n    return max(my_list, key=lambda x: x[1])"
300,"[1, 0, 0]",0,1/3,def count_binary_seq(n):\n    return (2**n) * (2**n - 1)
301,"[0, 1, 1]",0,2/3,"def dict_depth(my_dict):\n    if not my_dict or not isinstance(my_dict, dict):\n        return 0\n    return 1 + (max(dict_depth(v) for v in my_dict.values()) if my_dict else 0)"
302,"[0, 0, 0]",0,0/3,def set_Bit_Number(n):\n    i = 0\n    while n > 0:\n        if n & 1 == 1:\n            return i\n        n >>= 1\n        i += 1\n    return -1
303,"[0, 0, 0]",0,0/3,"def solve(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count % 2 == 0"
304,"[0, 0, 0]",0,0/3,"def find_Element(my_list, rotations, index, n_rotations):\n    for _ in range(n_rotations):\n        my_list = my_list[rotations:] + my_list[:rotations]\n    return my_list[index]"
305,"[0, 0, 0]",0,0/3,def start_withp(my_list):\n    return [word for word in my_list if word.startswith('P')]
306,"[0, 0, 0]",0,0/3,"def max_sum_increasing_subseq(arr, i, k, x):\n    prefix_sum = [0] * (len(arr) + 1)\n    for i in range(1, len(arr) + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    max_sum = 0\n    for j in range(1, i + 1):\n        if prefix_sum[j] <= prefix_sum[i] and j < k:\n            max_sum = max(max_sum, prefix_sum[i] - prefix_sum[j])\n    return max_sum + x"
307,"[0, 0, 0]",0,0/3,"def colon_tuplex(my_tuple, start, end):\n    return my_tuple[:start] + (my_tuple[start],) + (my_tuple[start+1:end],) + (my_tuple[end],) + my_tuple[end+1:]"
308,"[0, 0, 0]",0,0/3,"def large_product(list1, list2, n):\n    products = []\n    for i in range(n):\n        products.append(list1[i] * list2[i])\n    return sorted(products, reverse=True)[:n]"
309,"[1, 1, 1]",1,3/3,"def maximum(a, b):\n    return max(a, b)"
310,"[0, 1, 1]",0,2/3,def string_to_tuple(my_string):\n    return tuple(my_string)
311,"[0, 0, 0]",0,0/3,def set_left_most_unset_bit(n):\n    return n | (n + 1)
312,"[1, 1, 0]",0,2/3,"def volume_cone(radius, height):\n    return (1/3) * math.pi * radius ** 2 * height"
313,"[0, 0, 0]",0,0/3,def pos_nos(my_list):\n    return [x for x in my_list if x > 0]
314,"[0, 0, 0]",0,0/3,"[PYTHON]\ndef max_sum_rectangular_grid(grid, n):\n    # Initialize variables to keep track of the maximum sum and the indices of the selected elements\n    max_sum = 0\n    selected_indices = []\n\n    # Loop through each row of the grid\n    for i in range(len(grid)):\n        # Create a list to store the elements of the current row that have been selected\n        selected_elements = []\n\n        # Loop through each element of the current row\n        for j in range(len(grid[i])):\n            # If the element has not been selected yet and is not adjacent to an element that has been selected\n            if grid[i][j] not in selected_elements and (j == 0 or grid[i][j - 1] not in selected_elements) and (j == len"
315,"[0, 0, 1]",0,1/3,"def find_Max_Len_Even(word):\n    max_len = 0\n    max_word = """"\n    for i in range(len(word)):\n        if len(word[i]) % 2 == 0 and len(word[i]) > max_len:\n            max_len = len(word[i])\n            max_word = word[i]\n    if max_len == 0:\n        return ""-1""\n    else:\n        return max_word"
316,"[1, 1, 1]",1,3/3,"def find_last_occurrence(arr, num):\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == num:\n            return i\n    return -1"
317,"[0, 0, 1]",0,1/3,"def modified_encode(my_list):\n    result = []\n    for i, item in enumerate(my_list):\n        if i > 0 and my_list[i - 1] == item:\n            if result and result[-1] != item:\n                result.append(item)\n            else:\n                result[-1] = [result[-1], item]\n        else:\n            result.append(item)\n    return result"
318,"[0, 0, 0]",0,0/3,def max_volume(sides_sum):\n    return (sides_sum ** 3) / 12
319,"[1, 1, 1]",1,3/3,"import re\n\ndef find_long_word(string):\n    pattern = r""\\b\\w{5}\\b""\n    return re.findall(pattern, string)"
320,"[0, 0, 0]",0,0/3,def sum_difference(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2
321,"[0, 0, 0]",0,0/3,"[PYTHON]\ndef find_demlo(number):\n    demlo_map = {\n        ""1"": ""1234"",\n        ""2"": ""2345"",\n        ""3"": ""3456"",\n        ""4"": ""4567"",\n        ""5"": ""5678"",\n        ""6"": ""6789"",\n        ""7"": ""7891"",\n        ""8"": ""8910"",\n        ""9"": ""9101"",\n        ""0"": ""1011"",\n        ""-"": ""1110"",\n        "" "": ""1011""\n    }\n    \n    demlo_number = """"\n    for char in number:\n        demlo_number += demlo_map[char]\n    \n    return"
322,"[1, 1, 1]",1,3/3,"def position_min(my_list):\n    return [i for i, x in enumerate(my_list) if x == min(my_list)]"
323,"[0, 0, 0]",0,0/3,"def re_arrange(arr, n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(arr[i])\n        else:\n            result.append(-arr[i])\n    return result"
324,"[0, 0, 0]",0,0/3,"def sum_of_alternates(my_tuple):\n    result = []\n    for i in range(0, len(my_tuple), 2):\n        result.append(sum(my_tuple[i:i+2]))\n    return tuple(result)"
325,"[0, 0, 0]",0,0/3,def get_Min_Squares(n):\n    i = 1\n    while i * i <= n:\n        i += 1\n    return i - 1
326,"[1, 1, 1]",1,3/3,"def most_occurrences(strings):\n    word_count = {}\n    for string in strings:\n        words = string.split()\n        for word in words:\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n    most_occurrences = max(word_count.values())\n    for word, count in word_count.items():\n        if count == most_occurrences:\n            return word"
327,"[1, 1, 1]",1,3/3,"def check_isosceles(side1, side2, side3):\n    if side1 == side2 or side2 == side3 or side1 == side3:\n        return True\n    else:\n        return False"
328,"[0, 1, 0]",0,1/3,"def rotate_left(my_list, n, k):\n    return my_list[n:] + my_list[:n]"
329,"[1, 1, 1]",1,3/3,def neg_count(my_list):\n    count = 0\n    for num in my_list:\n        if num < 0:\n            count += 1\n    return count
330,"[1, 1, 1]",1,3/3,"import re\n\ndef find_char(string):\n    words = re.findall(r'\\b\\w{3,5}\\b', string)\n    return words"
331,"[1, 0, 0]",0,1/3,def count_unset_bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count
332,"[1, 1, 1]",1,3/3,"def char_frequency(s):\n    frequency = {}\n    for c in s:\n        frequency[c] = frequency.get(c, 0) + 1\n    return frequency"
333,"[1, 1, 1]",1,3/3,"def Sort(my_list):\n    return sorted(my_list, key=lambda x: x[1])"
334,"[1, 1, 1]",1,3/3,"def check_Validity(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        return True\n    else:\n        return False"
335,"[0, 0, 0]",0,0/3,"def ap_sum(a, d, n):\n    return (n * (2 * a + (n - 1) * d)) // 2"
336,"[1, 1, 1]",1,3/3,"def check_monthnum(month_name):\n    if month_name in [""February""]:\n        return True\n    else:\n        return False"
337,"[0, 0, 0]",0,0/3,"def text_match_word(text):\n    pattern = r""(?:^|\\W)lang(?:$|\\W)""\n    if re.search(pattern, text):\n        return ""Found a match!""\n    else:\n        return ""Not matched!"""
338,"[1, 1, 1]",1,3/3,"def count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if string[i] == string[j - 1]:\n                count += 1\n    return count"
339,"[1, 0, 0]",0,1/3,"def find_Divisor(start, end):\n    divisors = []\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            divisors.append(i)\n    return max(divisors)"
340,"[1, 1, 0]",0,2/3,def sum_three_smallest_nums(nums):\n    smallest_nums = sorted(nums)[:3]\n    return sum(smallest_nums)
341,"[1, 1, 1]",1,3/3,def set_to_tuple(my_set):\n    return tuple(sorted(my_set))
342,"[0, 0, 0]",0,0/3,"def find_minimum_range(arr):\n    min_val = float('inf')\n    max_val = float('-inf')\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] < min_val:\n                min_val = arr[i][j]\n            if arr[i][j] > max_val:\n                max_val = arr[i][j]\n    return (min_val, max_val)"
343,"[0, 0, 0]",0,0/3,"def dig_let(s):\n    digits = 0\n    letters = 0\n    for c in s:\n        if c.isdigit():\n            digits += 1\n        elif c.isalpha():\n            letters += 1\n    return digits, letters"
344,"[0, 0, 0]",0,0/3,"def count_Odd_Squares(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        factors = []\n        for j in range(1, int(i ** 0.5) + 1):\n            if i % j == 0:\n                factors.append(j)\n        if len(factors) % 2 == 1:\n            count += 1\n    return count"
345,"[1, 1, 1]",1,3/3,def diff_consecutivenums(nums):\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]
346,"[0, 0, 0]",0,0/3,"def zigzag(n, k):\n    if k == 1:\n        return n\n    else:\n        return zigzag(k, n-k+1)"
347,"[0, 0, 0]",0,0/3,"def count_squares(width, height):\n    return width * height"
348,"[0, 0, 0]",0,0/3,"def find_ways(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i, 0, -1):\n            if j - j % 10 in range(10):\n                dp[i] += dp[i - j]\n    return dp[n]"
349,"[1, 1, 1]",1,3/3,"def check(my_string):\n    return ""Yes"" if my_string.isdigit() and all(int(i) in [0, 1] for i in my_string) else ""No"""
350,"[0, 0, 0]",0,0/3,def minimum_length(s):\n    seen = set()\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n    return len(seen)
351,"[0, 0, 0]",0,0/3,"def first_Element(arr, k, x):\n    for i in range(len(arr)):\n        if arr[i] == x and arr.count(x) == k:\n            return arr[i]\n    return -1"
352,"[0, 0, 0]",0,0/3,def unique_characters(my_string):\n    return len(my_string) == len(set(my_string))
353,"[0, 0, 0]",0,0/3,"def remove_column(nested_list, column_index):\n    return [[row[column_index] for row in nested_list] for row in nested_list]"
354,"[0, 0, 0]",0,0/3,"def tn_ap(a, d, n):\n    return a + (n - 1) * d"
355,"[0, 0, 1]",0,1/3,def count_Rectangles(r):\n    return 4 * r ** 2
356,"[1, 1, 1]",1,3/3,"def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2"
357,"[1, 1, 1]",1,3/3,def find_max(tuple_records):\n    return max(max(record) for record in tuple_records)
358,"[1, 1, 1]",1,3/3,"def moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))"
359,"[0, 1, 1]",0,2/3,"def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return ""No""\n    else:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        if root1 == 2*root2:\n            return ""Yes""\n        else:\n            return ""No"""
360,"[0, 0, 0]",0,0/3,def get_carol(n):\n    return (n * (n + 1)) // 2
361,"[1, 1, 1]",1,3/3,def remove_empty(my_list):\n    return [sub_list for sub_list in my_list if sub_list if sub_list]
362,"[1, 0, 1]",0,2/3,"def max_occurrences(my_list):\n    return max(set(my_list), key=my_list.count)"
363,"[0, 0, 0]",0,0/3,"def add_K_element(my_tuple, k):\n    return tuple(map(lambda x: tuple(map(lambda y: y + k, x)), my_tuple))"
364,"[0, 1, 0]",0,1/3,def min_flip_to_make_string_alternate(binary_string):\n    count = 0\n    for i in range(len(binary_string) - 1):\n        if binary_string[i] == binary_string[i + 1]:\n            count += 1\n    return count
365,"[0, 0, 0]",0,0/3,def count_digits(n):\n    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count
366,"[1, 1, 1]",1,3/3,"def adjacent_num_product(my_list):\n    result = 1\n    for i in range(len(my_list) - 1):\n        result = max(result, my_list[i] * my_list[i + 1])\n    return result"
367,"[0, 0, 0]",0,0/3,"def is_tree_balanced(root):\n    if root is None:\n        return True\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n    if abs(left_height - right_height) > 1:\n        return False\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef get_height(root):\n    if root is None:\n        return 0\n    return max(get_height(root.left), get_height(root.right)) + 1"
368,"[1, 1, 1]",1,3/3,"def repeat_tuples(my_tuple, n):\n    return tuple(my_tuple for _ in range(n))"
369,"[0, 0, 0]",0,0/3,"def lateralsurface_cuboid(l, w, h):\n    return 2 * (l * w + l * h + w * h)"
370,"[0, 0, 0]",0,0/3,"def float_sort(my_tuple):\n    return sorted(my_tuple, key=lambda x: float(x[1]))"
371,"[1, 1, 1]",1,3/3,"def smallest_missing(arr, start, end):\n    for i in range(start, end + 1):\n        if i not in arr:\n            return i\n    return end + 1"
372,"[0, 0, 0]",0,0/3,"[PYTHON]\ndef heap_assending(my_list):\n    # Step 1: Build a max heap from the input list\n    for i in range(len(my_list) // 2, -1, -1):\n        sift_down(my_list, i, len(my_list) - 1)\n\n    # Step 2: Swap the first element with the last element\n    my_list[0], my_list[len(my_list) - 1] = my_list[len(my_list) - 1], my_list[0]\n\n    # Step 3: Repeat step 2 until the heap size is 1\n    while len(my_list) > 1:\n        # Step 3a: Sift down the root element to its correct position\n        s"
373,"[1, 1, 1]",1,3/3,"def volume_cuboid(length, width, height):\n    return length * width * height"
374,"[1, 0, 0]",0,1/3,def permute_string(s):\n    if len(s) == 1:\n        return [s]\n    permutations = []\n    for i in range(len(s)):\n        for perm in permute_string(s[:i] + s[i+1:]):\n            permutations.append(s[i] + perm)\n    return permutations
375,"[0, 0, 1]",0,1/3,"def round_num(num, multiple):\n    remainder = num % multiple\n    return num - remainder if remainder >= multiple // 2 else num + multiple - remainder"
376,"[1, 1, 1]",1,3/3,def remove_replica(my_tuple):\n    seen = set()\n    result = []\n    for item in my_tuple:\n        if item not in seen:\n            result.append(item)\n            seen.add(item)\n        else:\n            result.append('MSP')\n    return tuple(result)
377,"[1, 1, 1]",1,3/3,"def remove_Char(str, char):\n    return str.replace(char, """")"
378,"[1, 1, 1]",1,3/3,def move_first(my_list):\n    return my_list[len(my_list)-1:] + my_list[:len(my_list)-1]
379,"[1, 1, 1]",1,3/3,"def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + l * h + w * h)"
380,"[0, 0, 0]",0,0/3,"def multi_list(m, n):\n    return [[(i * n) + j for j in range(n)] for i in range(m)]"
381,"[1, 1, 1]",1,3/3,"def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])"
382,"[0, 0, 1]",0,1/3,def find_rotation_count(arr):\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count
383,"[0, 0, 0]",0,0/3,def even_bit_toggle_number(n):\n    return n ^ 0xAAAAAAAA
384,"[1, 1, 1]",1,3/3,"def frequency_Of_Smallest(n, arr):\n    smallest = min(arr)\n    return arr.count(smallest)"
385,"[0, 0, 0]",0,0/3,def get_perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)
386,"[0, 0, 0]",0,0/3,"def swap_count(s):\n    left, right = 0, 0\n    for c in s:\n        if c == '[':\n            left += 1\n        elif c == ']':\n            right += 1\n    return left + right - min(left, right)"
387,"[1, 1, 1]",1,3/3,"def even_or_odd(hex_num):\n    if int(hex_num, 16) % 2 == 0:\n        return ""Even""\n    else:\n        return ""Odd"""
388,"[1, 1, 1]",1,3/3,def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2
389,"[0, 0, 0]",0,0/3,def find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)
390,"[1, 1, 1]",1,3/3,"def add_string(my_list, string):\n    return [string.format(i) for i in my_list]"
391,"[1, 1, 1]",1,3/3,"def convert_list_dictionary(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        temp = {}\n        temp[list1[i]] = {}\n        temp[list1[i]][list2[i]] = list3[i]\n        result.append(temp)\n    return result"
392,"[1, 1, 1]",1,3/3,"def get_max_sum(n):\n    if n <= 2:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
393,"[0, 0, 0]",0,0/3,"def max_length_list(my_list):\n    return max(my_list, key=lambda x: len(x))"
394,"[1, 1, 1]",1,3/3,def check_distinct(my_tuple):\n    return len(my_tuple) == len(set(my_tuple))
395,"[1, 1, 1]",1,3/3,"def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char_count.get(char):\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    return None"
396,"[0, 0, 1]",0,1/3,"import re\n\ndef check_char(string):\n    pattern = r""^([a-zA-Z])\\1$""\n    if re.match(pattern, string):\n        return ""Valid""\n    else:\n        return ""Invalid"""
397,"[1, 1, 1]",1,3/3,"def median_numbers(num1, num2, num3):\n    num_list = [num1, num2, num3]\n    num_list.sort()\n    if len(num_list) % 2 == 0:\n        median = (num_list[len(num_list)//2] + num_list[len(num_list)//2 - 1]) / 2\n    else:\n        median = num_list[len(num_list)//2]\n    return median"
398,"[1, 0, 0]",0,1/3,def sum_of_digits(my_list):\n    result = 0\n    for num in my_list:\n        for digit in str(num):\n            result += int(digit)\n    return result
399,"[1, 1, 1]",1,3/3,"def bitwise_xor(t1, t2):\n    return tuple(a ^ b for a, b in zip(t1, t2))"
400,"[0, 0, 0]",0,0/3,def extract_freq(my_list):\n    unique_tuples = set(my_list)\n    freq = {}\n    for tuple in unique_tuples:\n        freq[tuple] = my_list.count(tuple)\n    return freq
401,"[1, 1, 1]",1,3/3,"def add_nested_tuples(tuple1, tuple2):\n    return tuple(map(lambda x, y: tuple(map(lambda a, b: a + b, x, y)), tuple1, tuple2))"
402,"[1, 1, 1]",1,3/3,"def ncr_modp(n, r, p):\n    f = math.factorial(n)\n    f = f // math.factorial(r)\n    f = f // math.factorial(n-r)\n    return f % p"
403,"[1, 1, 1]",1,3/3,"import re\n\ndef is_valid_URL(url):\n    pattern = r""^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$""\n    return re.match(pattern, url) is not None"
404,"[1, 1, 1]",1,3/3,"def minimum(a, b):\n    return min(a, b)"
405,"[1, 1, 1]",1,3/3,"def check_tuplex(my_tuple, element):\n    return element in my_tuple"
406,"[1, 1, 1]",1,3/3,"def find_Parity(n):\n    if n % 2 == 0:\n        return ""Even Parity""\n    else:\n        return ""Odd Parity"""
407,"[1, 0, 0]",0,1/3,"def rearrange_bigger(num):\n    num_str = str(num)\n    num_list = list(num_str)\n    num_list.sort(reverse=True)\n    new_num_str = """".join(num_list)\n    try:\n        int(new_num_str)\n        return int(new_num_str)\n    except ValueError:\n        return False"
408,"[0, 0, 0]",0,0/3,"def k_smallest_pairs(arr1, arr2, k):\n    return [[x, y] for x in arr1 for y in arr2 if x < y and (x, y) not in [(x, y) for x in arr1 for y in arr2 if x < y]][:k]"
409,"[1, 1, 1]",1,3/3,"def min_product_tuple(my_list):\n    return min(x*y for (x,y) in my_list)"
410,"[0, 0, 0]",0,0/3,def min_val(my_list):\n    return min(my_list)
411,"[0, 0, 0]",0,0/3,"import re\n\ndef snake_to_camel(snake_case_string):\n    camel_case_string = re.sub(r'_([a-z])', lambda m: m.group(1).upper(), snake_case_string)\n    return camel_case_string"
412,"[1, 1, 1]",1,3/3,def remove_odd(my_list):\n    return [x for x in my_list if x % 2 == 0]
413,"[1, 1, 1]",1,3/3,"def extract_nth_element(my_list, n):\n    return [item[n] for item in my_list]"
414,"[1, 1, 1]",1,3/3,"def overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)"
415,"[0, 0, 0]",0,0/3,"def max_Product(arr):\n    max_val = -float('inf')\n    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_index = i\n    for i in range(len(arr)):\n        if i != max_index and arr[i] * arr[max_index] > max_val:\n            max_val = arr[i] * arr[max_index]\n            max_index = i\n    return (arr[max_index], arr[max_index])"
416,"[0, 0, 1]",0,1/3,"def breakSum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(n - 1, breakSum(n - 1) + 1)"
417,"[0, 0, 0]",0,0/3,"def group_tuples(tuples):\n    result = []\n    for key, group in itertools.groupby(tuples, key=lambda x: x[0]):\n        result.append([x for x in group])\n    return result"
418,"[1, 1, 1]",1,3/3,"def Find_Max(my_list):\n    return max(my_list, key=len)"
419,"[1, 1, 1]",1,3/3,def round_and_sum(numbers):\n    rounded_numbers = [round(number) for number in numbers]\n    return sum(rounded_numbers) * len(rounded_numbers)
420,"[0, 0, 0]",0,0/3,"def cube_Sum(n):\n    return sum([i**3 for i in range(2, n+1)])"
421,"[0, 0, 0]",0,0/3,def concatenate_tuple(my_tuple):\n    return '-'.join(my_tuple)
422,"[0, 0, 1]",0,1/3,"def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/(n**3)"
423,"[0, 0, 0]",0,0/3,"[PYTHON]\ndef get_maxgold(gold_map, rows, cols):\n    # Initialize the dp table with 0s\n    dp = [[0] * cols for _ in range(rows)]\n\n    # Loop through each cell in the gold map\n    for i in range(rows):\n        for j in range(cols):\n            # If the current cell is not empty, add its gold value to the dp table\n            if gold_map[i][j] != 0:\n                dp[i][j] = gold_map[i][j]\n\n    # Loop through each cell in the dp table\n    for i in range(rows):\n        for j in range(cols):\n            # If the current cell is not empty, check if there is a path to the top-left cell\n            if"
424,"[1, 1, 1]",1,3/3,def extract_rear(my_tuple):\n    return [s[-1] for s in my_tuple]
425,"[1, 1, 1]",1,3/3,"def count_element_in_list(my_list, element):\n    count = 0\n    for sublist in my_list:\n        if element in sublist:\n            count += 1\n    return count"
426,"[1, 1, 1]",1,3/3,"def filter_oddnumbers(my_list):\n    return list(filter(lambda x: x%2!=0, my_list))"
427,"[1, 1, 1]",1,3/3,"import re\n\ndef change_date_format(date_string):\n    pattern = r""(\\d{4})-(\\d{2})-(\\d{2})""\n    replacement = r""\\3-\\2-\\1""\n    return re.sub(pattern, replacement, date_string)"
428,"[1, 1, 1]",1,3/3,"def shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j-gap] > temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"
429,"[1, 1, 1]",1,3/3,"def and_tuples(t1, t2):\n    return tuple(x & y for x, y in zip(t1, t2))"
430,"[0, 0, 0]",0,0/3,"def parabola_directrix(a,b,c):\n    return -b/(2*a)"
431,"[1, 0, 1]",0,2/3,"def common_element(list1, list2):\n    return any(elem in list2 for elem in list1)"
432,"[0, 0, 0]",0,0/3,"def median_trapezium(a, b, c):\n    return (a + b + c) / 2"
433,"[0, 0, 0]",0,0/3,"def check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return ""Yes, the entered number is greater than those in the array""\n    return ""No, entered number is less than those in the array"""
434,"[1, 1, 1]",1,3/3,"def text_match_one(text):\n    pattern = r""a[b]+""\n    if re.search(pattern, text):\n        return ""Found a match!""\n    else:\n        return ""Not matched!"""
435,"[0, 0, 0]",0,0/3,def last_digit(n):\n    return n % 10
436,"[0, 0, 0]",0,0/3,def neg_nos(my_list):\n    return [x for x in my_list if x < 0]
437,"[0, 0, 0]",0,0/3,"def remove_odd(s):\n    return """".join(c for i, c in enumerate(s) if i % 2 == 0)"
438,"[0, 0, 0]",0,0/3,def count_bidirectional(my_list):\n    count = 0\n    for i in range(len(my_list) - 1):\n        if my_list[i] == my_list[i+1]:\n            count += 1\n    return count
439,"[1, 1, 1]",1,3/3,"def multiple_to_single(my_list):\n    return int("""".join(map(str, my_list)))"
440,"[0, 0, 0]",0,0/3,"def find_adverb_position(sentence):\n    adverbs = []\n    for i, word in enumerate(sentence.split()):\n        if word.endswith('ly'):\n            adverbs.append((i, len(word), word))\n    return adverbs"
441,"[1, 1, 1]",1,3/3,def surfacearea_cube(side_length):\n    return 6 * side_length ** 2
442,"[0, 0, 0]",0,0/3,def positive_count(arr):\n    return len([x for x in arr if x > 0]) / len(arr)
443,"[0, 0, 1]",0,1/3,def largest_neg(my_list):\n    largest = None\n    for num in my_list:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest
444,"[0, 0, 0]",0,0/3,"def trim_tuple(tuple_list, k):\n    return [tuple(x[k:]) for x in tuple_list]"
445,"[1, 1, 1]",1,3/3,"def index_multiplication(tuple1, tuple2):\n    return tuple(map(lambda x, y: (x[0] * y[0], x[1] * y[1]), tuple1, tuple2))"
446,"[1, 1, 1]",1,3/3,"def count_Occurrence(my_tuple, my_list):\n    count = 0\n    for i in my_tuple:\n        if i in my_list:\n            count += 1\n    return count"
447,"[0, 0, 0]",0,0/3,def cube_nums(my_list):\n    return [lambda x: x**3(num) for num in my_list]
448,"[0, 0, 0]",0,0/3,"def cal_sum(n):\n    perrin_nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    return sum(perrin_nums[:n])"
449,"[0, 0, 0]",0,0/3,"def check_triangle(p1, p2, p3):\n    a = (p2[0] - p1[0]) * (p3[1] - p1[1])\n    b = (p2[1] - p1[1]) * (p3[0] - p1[0])\n    if a == b:\n        return 'Yes'\n    else:\n        return 'No'"
450,"[1, 1, 1]",1,3/3,"def extract_string(my_list, size):\n    return [s for s in my_list if len(s) == size]"
451,"[1, 1, 1]",1,3/3,"import re\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)"
452,"[0, 0, 0]",0,0/3,"def loss_amount(given_amount, original_amount):\n    if given_amount < original_amount:\n        return None\n    else:\n        return given_amount - original_amount"
453,"[0, 0, 0]",0,0/3,"def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum"
454,"[1, 1, 1]",1,3/3,"def text_match_wordz(text):\n    if ""z"" in text:\n        return ""Found a match!""\n    else:\n        return ""Not matched!"""
455,"[1, 1, 1]",1,3/3,"def check_monthnumb_number(monthnumb):\n    if monthnumb in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
456,"[1, 1, 1]",1,3/3,def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]
457,"[1, 1, 1]",1,3/3,"def Find_Min(my_list):\n    return min(my_list, key=len)"
458,"[1, 1, 1]",1,3/3,"def rectangle_area(width, height):\n    return width * height"
459,"[1, 1, 1]",1,3/3,"import re\n\ndef remove_uppercase(string):\n    return re.sub('[A-Z]', '', string)"
460,"[1, 1, 1]",1,3/3,def Extract(my_list):\n    return [sublist[0] for sublist in my_list]
461,"[0, 0, 1]",0,1/3,def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())
462,"[0, 0, 0]",0,0/3,def combinations_list(my_list):\n    if not my_list:\n        return [[]]\n    else:\n        rest = combinations_list(my_list[1:])\n        return [[item] + comb for comb in rest for item in [my_list[0]]] + rest
463,"[0, 0, 1]",0,1/3,"def max_subarray_product(arr):\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
464,"[1, 1, 1]",1,3/3,"def check_value(my_dict, value):\n    return all(v == value for v in my_dict.values())"
465,"[1, 1, 1]",1,3/3,"def drop_empty(my_dict):\n    return {key: value for key, value in my_dict.items() if value is not None}"
466,"[1, 0, 0]",0,1/3,"def find_peak(arr, n):\n    for i in range(n):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            return i\n    return -1"
467,"[0, 0, 0]",0,0/3,"def decimal_to_Octal(decimal):\n    return oct(decimal).replace(""0o"", """")"
468,"[0, 0, 0]",0,0/3,"[PYTHON]\ndef max_product(arr, k):\n    # Find the maximum product of an increasing subsequence of length k\n    # in an array of integers.\n    #\n    # Args:\n    #   arr (list): Input array\n    #   k (int): Length of the subsequence\n    #\n    # Returns:\n    #   int: Maximum product\n\n    # Initialize variables\n    max_product = 1\n    product = 1\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        product *= arr[i]\n\n        # Check if the product is greater than the maximum product\n        if product > max_product:\n            max_product = product\n\n        # Check if the product is greater than the maximum product of the subsequence\n        if i >="
469,"[0, 0, 0]",0,0/3,"def max_profit(prices, k):\n    n = len(prices)\n    if n == 0 or k == 0:\n        return 0\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + prices[i-1])\n    return dp[n][k]"
470,"[1, 1, 1]",1,3/3,"def add_pairwise(my_tuple):\n    return tuple(sum(x) for x in zip(my_tuple, my_tuple[1:]))"
471,"[0, 1, 0]",0,1/3,"def find_remainder(arr, n, m):\n    result = 0\n    for i in range(len(arr)):\n        result += arr[i]\n        if result >= n:\n            result -= n\n    if result == 0:\n        return 0\n    else:\n        return m - result"
472,"[0, 0, 0]",0,0/3,def check_consecutive(my_list):\n    return all(my_list[i+1] - my_list[i] == 1 for i in range(len(my_list) - 1))
473,"[0, 0, 0]",0,0/3,"def tuple_intersection(tuple_list, expected_result):\n    result = set()\n    for tuple in tuple_list:\n        result.update(tuple)\n    return result"
474,"[1, 1, 1]",1,3/3,"def replace_char(string, char_to_replace, replacement_char):\n    return string.replace(char_to_replace, replacement_char)"
475,"[1, 1, 1]",1,3/3,"def sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"
476,"[1, 1, 1]",1,3/3,def big_sum(arr):\n    return max(arr) + min(arr)
477,"[1, 1, 1]",1,3/3,def is_lower(string):\n    return string.lower()
478,"[1, 1, 1]",1,3/3,def remove_lowercase(string):\n    return ''.join([char for char in string if char.isupper()])
479,"[0, 0, 0]",0,0/3,def first_digit(n):\n    return int(str(n)[0])
480,"[1, 1, 1]",1,3/3,"def get_max_occuring_char(input_str):\n    char_count = {}\n    max_count = 0\n    max_char = """"\n    for char in input_str:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n    return max_char"
481,"[0, 1, 0]",0,1/3,"def is_subset_sum(my_list, target, current_sum=0):\n    if not my_list:\n        return False\n    if current_sum == target:\n        return True\n    if current_sum > target:\n        return False\n    return is_subset_sum(my_list[1:], target, current_sum + my_list[0]) or is_subset_sum(my_list[1:], target, current_sum)"
482,"[1, 1, 1]",1,3/3,"import re\n\ndef match(string):\n    pattern = r""[A-Z][a-z]+""\n    if re.search(pattern, string):\n        return ""Yes""\n    else:\n        return ""No"""
483,"[0, 0, 0]",0,0/3,"def first_Factorial_Divisible_Number(x):\n    for i in range(1, 100):\n        if sum([j for j in range(1, i + 1) if i % j == 0]) % x == 0:\n            return i\n    return -1"
484,"[1, 1, 1]",1,3/3,"def remove_matching_tuple(tuple1, tuple2):\n    result = []\n    for t in tuple1:\n        if t not in tuple2:\n            result.append(t)\n    return result"
485,"[1, 0, 1]",0,2/3,"def largest_palindrome(arr, n):\n    largest = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > largest and is_palindrome(arr[i] * arr[j]):\n                largest = arr[i] * arr[j]\n    return largest\n\ndef is_palindrome(num):\n    str_num = str(num)\n    return str_num == str_num[::-1]"
486,"[1, 1, 1]",1,3/3,"import math\n\ndef binomial_probability(n, k, p):\n    return math.comb(n, k) * (p ** k) * ((1 - p) ** (n - k))"
487,"[1, 1, 1]",1,3/3,"def sort_tuple(my_list):\n    return sorted(my_list, key=lambda x: x[-1])"
488,"[0, 0, 0]",0,0/3,import math\n\ndef area_pentagon(side_length):\n    return (5 * side_length * math.sin(math.pi / 5)) / (4 * math.tan(math.pi / 10))
489,"[1, 1, 1]",1,3/3,"def frequency_Of_Largest(n, arr):\n    largest = max(arr)\n    return arr.count(largest)"
490,"[0, 0, 0]",0,0/3,def extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    for pair in tuple_list:\n        if pair[::-1] in tuple_list:\n            symmetric_pairs.add(pair)\n    return symmetric_pairs
491,"[0, 0, 0]",0,0/3,"def sum_gp(a, r, n):\n    return a * (1 - r**n) / (1 - r)"
492,"[1, 1, 1]",1,3/3,"def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"
